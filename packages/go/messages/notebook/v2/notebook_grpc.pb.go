// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NotebookClient is the client API for Notebook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotebookClient interface {
	ReadEntry(ctx context.Context, in *ReadEntryGRPCRequest, opts ...grpc.CallOption) (*ReadEntryGRPCResponse, error)
	StartNewEntry(ctx context.Context, in *StartNewEntryGRPCRequest, opts ...grpc.CallOption) (*StartNewEntryGRPCResponse, error)
}

type notebookClient struct {
	cc grpc.ClientConnInterface
}

func NewNotebookClient(cc grpc.ClientConnInterface) NotebookClient {
	return &notebookClient{cc}
}

func (c *notebookClient) ReadEntry(ctx context.Context, in *ReadEntryGRPCRequest, opts ...grpc.CallOption) (*ReadEntryGRPCResponse, error) {
	out := new(ReadEntryGRPCResponse)
	err := c.cc.Invoke(ctx, "/messages.notebook.v2.Notebook/ReadEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notebookClient) StartNewEntry(ctx context.Context, in *StartNewEntryGRPCRequest, opts ...grpc.CallOption) (*StartNewEntryGRPCResponse, error) {
	out := new(StartNewEntryGRPCResponse)
	err := c.cc.Invoke(ctx, "/messages.notebook.v2.Notebook/StartNewEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotebookServer is the server API for Notebook service.
// All implementations must embed UnimplementedNotebookServer
// for forward compatibility
type NotebookServer interface {
	ReadEntry(context.Context, *ReadEntryGRPCRequest) (*ReadEntryGRPCResponse, error)
	StartNewEntry(context.Context, *StartNewEntryGRPCRequest) (*StartNewEntryGRPCResponse, error)
	mustEmbedUnimplementedNotebookServer()
}

// UnimplementedNotebookServer must be embedded to have forward compatible implementations.
type UnimplementedNotebookServer struct {
}

func (UnimplementedNotebookServer) ReadEntry(context.Context, *ReadEntryGRPCRequest) (*ReadEntryGRPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadEntry not implemented")
}
func (UnimplementedNotebookServer) StartNewEntry(context.Context, *StartNewEntryGRPCRequest) (*StartNewEntryGRPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartNewEntry not implemented")
}
func (UnimplementedNotebookServer) mustEmbedUnimplementedNotebookServer() {}

// UnsafeNotebookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotebookServer will
// result in compilation errors.
type UnsafeNotebookServer interface {
	mustEmbedUnimplementedNotebookServer()
}

func RegisterNotebookServer(s grpc.ServiceRegistrar, srv NotebookServer) {
	s.RegisterService(&_Notebook_serviceDesc, srv)
}

func _Notebook_ReadEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadEntryGRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotebookServer).ReadEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.notebook.v2.Notebook/ReadEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotebookServer).ReadEntry(ctx, req.(*ReadEntryGRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notebook_StartNewEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartNewEntryGRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotebookServer).StartNewEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.notebook.v2.Notebook/StartNewEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotebookServer).StartNewEntry(ctx, req.(*StartNewEntryGRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notebook_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messages.notebook.v2.Notebook",
	HandlerType: (*NotebookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadEntry",
			Handler:    _Notebook_ReadEntry_Handler,
		},
		{
			MethodName: "StartNewEntry",
			Handler:    _Notebook_StartNewEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notebook/v2/notebook.proto",
}
