syntax = "proto3";
package messages.notebook;
option go_package = "di_messages/notebook";

import "google/protobuf/timestamp.proto";
import "status.proto";

message Error {
  enum Code {
    UNKNOWN = 0;
    NOT_FOUND = 1;
    VALIDATION_FAILED = 2;
  }

  Code code = 1;
  string message = 2;
}

message Principal {
  enum Type {
    USER = 0;
  }

  Type type = 1;
  string id = 2;
}

message RequestContext {
  string trace_id = 1;
  Principal principal = 2;
}

message ReadEntryRequest {
  message Payload {
    string id = 1;
  }

  RequestContext context = 1;
  Payload payload = 2;
}

message ReadEntryResponse {
  message Payload {
    string id = 1;
    string text = 2;
    string creator_id = 3;
    google.protobuf.Timestamp created_at = 4;
    google.protobuf.Timestamp updated_at = 5;
  }

  google.rpc.Status status = 1;
  Payload payload = 2;
  string trace_id = 3;
}

message StartNewEntryRequest {
  message Payload {
    string text = 1;
    string creator_id = 2;
    google.protobuf.Timestamp created_at = 3;
    google.protobuf.Timestamp updated_at = 4;
  }

  RequestContext context = 1;
  Payload payload = 2;
}

message StartNewEntryResponse {
  message Payload {
    string id = 1;
  }

  Error error = 1;
  Payload payload = 2;
  string trace_id = 3;
}

// TODO: Create a new event here that is more domain event-specific. di-entry can translate between that and this generic store update.
message ChangeEntryRequest {
  message Payload {
    string id = 1;
    string text = 2;
  }

  RequestContext context = 1;
  Payload payload = 2;
}

message ChangeEntryResponse {
  // TODO: Consider just returning id or ok and letting client re-request
  // i.e. separate commands and queries
  message Payload {
    string id = 1;
    string text = 2;
    string creator_id = 3;
    google.protobuf.Timestamp created_at = 4;
    google.protobuf.Timestamp updated_at = 5;
  }

  Error error = 1;
  Payload payload = 2;
  string trace_id = 3;
}

message ListEntriesRequest {
  message Payload {
    int32 first = 1;
    string after = 2;
    string creator_id = 3;
  }

  RequestContext context = 1;
  Payload payload = 2;
}

message ListEntriesResponse {
  message PageInfo {
    int32 total_count = 1;
    bool has_next_page = 2;
    string start_cursor = 3;
    string end_cursor = 4;
  }

  message Entity {
    string id = 1;
    string text = 2;
    string creator_id = 3;
    google.protobuf.Timestamp created_at = 4;
    google.protobuf.Timestamp updated_at = 5;
  }

  Error error = 1;
  repeated Entity payload = 2;
  string trace_id = 3;
  PageInfo page_info = 4;
}

message DiscardEntryRequest {
  message Payload {
    string id = 1;
  }

  RequestContext context = 1;
  Payload payload = 2;
}

message DiscardEntryResponse {
  Error error = 1;
  string trace_id = 2;
}

message InfoEntryCreated {
  message Payload {
    string id = 1;
  }

  Payload payload = 1;
}

message InfoEntryUpdated {
  message Payload {
    string id = 1;
    string text = 2;
    string creator_id = 3;
    google.protobuf.Timestamp created_at = 4;
    google.protobuf.Timestamp updated_at = 5;
  }

  Payload payload = 1;
}

message InfoEntryDeleted {
  message Payload {
    string id = 1;
  }

  Payload payload = 1;
}
